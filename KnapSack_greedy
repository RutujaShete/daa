class Item:
    def _init_(self, profit, weight):
        self.profit = profit
        self.weight = weight

def fractionalKnapsack(w, arr):
    # Sort items by profit-to-weight ratio in descending order
    arr.sort(key=lambda x: x.profit / x.weight, reverse=True)

    finalValue = 0.0  # Variable to store the final value of the knapsack

    for item in arr:
        if w >= item.weight:
            # If the knapsack can carry the whole item, take it
            finalValue += item.profit
            w -= item.weight
        else:
            # Take the fraction of the last item that fits
            finalValue += item.profit * (w / item.weight)
            break

    return finalValue

# Main function to get inputs and execute the knapsack algorithm
if _name_ == "_main_":
    n = int(input("Enter number of items:\n"))
    arr = []

    for i in range(n):
        profit = int(input(f"Enter profit of item {i + 1}:\n"))
        weight = int(input(f"Enter weight of item {i + 1}:\n"))
        arr.append(Item(profit, weight))

    w = int(input("Enter capacity of knapsack:\n"))
    print("Maximum value in knapsack:", fractionalKnapsack(w, arr))
